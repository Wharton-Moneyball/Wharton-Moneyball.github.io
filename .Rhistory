install.packages(c("backports", "DT", "fs", "ggplot2", "htmltools", "isoband", "jsonlite", "knitr", "openssl", "processx", "Rcpp", "tinytex", "xfun"))
library(ggplot2)
library(tidyverse)
library(readr)
library(plotly)
library(knitr)
library(kableExtra)
library(DT)
library(janitor)
library(data.table)
setwd("~/Google Drive/Blogs/Three Batter Rule")
library(ggplot2)
library(tidyverse)
library(readr)
library(plotly)
library(knitr)
library(kableExtra)
library(DT)
library(janitor)
library(data.table)
setwd("~/Google Drive/Baseball Research/Three Batter Rule")
RP_vs_LHH <- read_csv("Splits Leaderboard Data vs LHH as RP.csv",
col_types = cols(`LHH_SO/BB` = col_double())
)
cleaned_RP_vs_LHH <- RP_vs_LHH %>% select(c(Name,playerId,IP,LHH_OPS,`LHH_HR/9`,`LHH_SO/BB`,LHH_ERA,LHH_WHIP))
RP_vs_RHH <- read_csv("Splits Leaderboard Data vs RHH as RP.csv")
cleaned_RP_vs_RHH <- RP_vs_RHH %>%
select(c(Name,playerId,IP,RHH_OPS,`RHH_HR/9`,
`RHH_SO/BB`,RHH_ERA,RHH_WHIP))
Splits <- inner_join(cleaned_RP_vs_LHH,cleaned_RP_vs_RHH,by="playerId")
Splits <- Splits %>%
rename(LHH_IP = IP.x) %>%
rename(RHH_IP = IP.y)
Splits <- Splits %>%
select(-Name.y) %>%
rename("Name" = Name.x) %>%
mutate(IP = LHH_IP + RHH_IP)
Plot_Splits <- ggplot(Splits, aes(x=LHH_OPS, y=RHH_OPS,
size=IP, names=Name)) +
geom_point(alpha=0.7) +
geom_vline(xintercept = mean(Splits$LHH_OPS), col="blue") +
geom_hline(yintercept = mean(Splits$RHH_OPS), col="blue") +
labs(x="LHH OPS",y="RHH OPS")
ggplotly(Plot_Splits)
# Now get a list of those pitchers with better than average opponent OPS for both LHHs and RHHs
Splits %>% filter(LHH_OPS < mean(LHH_OPS) & RHH_OPS < mean(RHH_OPS))
# Prepare table
List1 <- Splits %>%
filter(LHH_OPS < mean(LHH_OPS) & RHH_OPS < mean(RHH_OPS)) %>%
select(-IP) %>%
arrange(Name)
List1Table <- List1 %>% select(-playerId)
ggplotly(Plot_Splits)
# build aesthetics
font.size <- "9pt"
sketch1 = htmltools::withTags(table(class = 'display',
thead(tr(th(rowspan = 2, 'Pitcher'),
th(colspan = 6, 'vs LHH'),
th(colspan = 6, 'vs RHH')),
tr(lapply(rep(c("IP","OPS","HR/9","SO/BB","ERA","WHIP"),
2), th)))))
# display table
DT::datatable(List1Table,
container = sketch1, rownames = FALSE,
options=list(autoWidth = TRUE,
columnDefs = list(list(width = '110px', targets = 0),
list(width = '10px', targets = 1:12)),
scrollX = TRUE,
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", font.size, "'});"),
"}")
) ) %>% formatRound(c("LHH_OPS","LHH_HR/9","LHH_SO/BB","LHH_ERA","LHH_WHIP","RHH_OPS",
"RHH_HR/9","RHH_SO/BB","RHH_ERA","RHH_WHIP"),
3) %>%
formatStyle(c(1,7), `border-right` = "solid 2px")
Games_and_Batters_Faced <- read_csv("Games and Batters Faced.csv",
col_types = cols_only(G = col_guess(), IP = col_guess(),
Name = col_guess(), TBF = col_guess(),
playerid = col_guess()
)
)
cleaned_Games_and_Batters_Faced <- Games_and_Batters_Faced %>%
mutate(`IP/G` = IP/G) %>%
mutate(`TBF/G` = TBF/G)
LessThanThreeBattersPerGame <- cleaned_Games_and_Batters_Faced %>%
filter(`TBF/G` < 3)
LessThanThreeBattersPerGame$Name
Game_Logs <- read_csv("Game Logs.csv",
col_types = cols_only(Date = col_guess(), IP = col_guess(),
Name = col_guess(), TBF = col_guess(),
playerId = col_guess()
)
)
LengthyOutingRelievers <- cleaned_Games_and_Batters_Faced %>%
filter(`TBF/G` > 3 & `IP/G` >= 1) %>%
arrange(Name)
LengthyOutingRelievers_no_playerId <- LengthyOutingRelievers %>% select(-playerid)
Durable_Length <- LengthyOutingRelievers %>% select(playerid)
Daily_IP_per_PitcherID <- Game_Logs %>%
# modify table so it can be pivoted
select(-c(Name,TBF)) %>%
group_by(playerId) %>%
mutate(row = row_number()) %>%
# pivot table to combine IP for all pitchers, filling all na values with 0
tidyr::pivot_wider(names_from = playerId, values_from = IP, values_fill = list(IP=0)) %>%
# remove row number
select(-row) %>%
# collect rows into one record per date
group_by(Date) %>%
summarise_each(funs(sum))
colstokeep <- Daily_IP_per_PitcherID %>%
gather(player, value, -Date) %>%
group_by(player) %>%
mutate(conseq = value + shift(value, fill = 0, type = "lead")) %>%
filter(conseq >= 1) %>%
distinct(player) %>%
pull()
playerIds_tokeep <-  Daily_IP_per_PitcherID %>%
select(colstokeep)
Durable_Consecutive <- as_tibble(as.numeric(rownames(t(playerIds_tokeep)))) %>%
rename(playerid = value)
List2 <- inner_join(Durable_Consecutive, Durable_Length)
List2 <- inner_join(List2, Games_and_Batters_Faced) %>%
rename(playerId = playerid)
Final_List_for_Plot <- inner_join(List1,List2,by="playerId") %>%
rename(Name=Name.x)
Final_Table <- inner_join(List1,List2,by="playerId") %>%
select(-c(Name.y,playerId)) %>%
rename(Name = Name.x) %>%
mutate(`IP/G` = round(IP/G,1)) %>%
mutate(`TBF/G` = round(TBF/G,1))
names(Final_Table) <- c(names(List1Table), "G",	"IP",	"TBF",	"IP/G",	"TBF/G")
Final_List <- Final_Table[,1]
Current_Teams <- c("CHW","LAA","TBA","WAS","TBA","SDN","PIT","STN","LAA",
"KCA","MIL","HOU","LAN","ARI","TOR","LAN","SDN","OAK",
"BOS","ATL","CIN","SFN","FA","COL","ATL","NYN","MIN",
"SFN","LAA","ATL","OAK")
Final_Table_Teams <- add_column(Final_Table, Current_Teams, .after = 1)
# display table
DT::datatable(LengthyOutingRelievers_no_playerId,
rownames = FALSE,
width = '675px',
options=list(autoWidth = TRUE,
columnDefs = list(list(width = '70px', targets =0),
list(width = '8px', targets = 1:5)))) %>%
formatRound(c("TBF/G","IP/G"),1) %>%
formatStyle(1,`border-right` = "solid 2px") %>%
formatStyle(c(1:6), fontSize = '90%')
Final_Plot <- ggplot(Splits, aes(x=LHH_OPS, y=RHH_OPS, size=IP, names=Name)) +
geom_point(aes(alpha=0.2)) +
geom_point(data = Final_List_for_Plot, aes(x=LHH_OPS, y=RHH_OPS, size=IP, text=Name, alpha=1)) +
geom_vline(xintercept = mean(Splits$LHH_OPS), col="blue") +
geom_hline(yintercept = mean(Splits$RHH_OPS), col="blue")
ggplotly(Final_Plot, tooltip = "text")
# build aesthetics
sketch3 = htmltools::withTags(table(class = 'display',
thead(tr(th(colspan = 2, ''),
th(colspan = 6, 'vs LHH'),
th(colspan = 6, 'vs RHH'),
th(colspan = 5, 'Durability')),
tr(lapply(c("Name","Team","IP","OPS","HR/9","SO/BB",
"ERA","WHIP","IP","OPS","HR/9","SO/BB","ERA",
"WHIP","G","IP","TBF","IP/G","TBF/G"),
th)
)
)
)
)
# display table
DT::datatable(Final_Table_Teams,
container = sketch3, rownames = FALSE,
options=list(autoWidth = TRUE,
columnDefs = list(list(width = '110px', targets = 0),
list(width = '10px', targets = 2:8),
list(width = '10px', targets = 9:18),
list(className = 'dt-right', targets = 10:13)),
scrollX = TRUE,
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", font.size, "'});"),
"}"))) %>%
formatRound(c(c(4:8),c(10:14)),3) %>%
formatRound(c(c(3,9),c(18:19)),1) %>%
formatStyle(c(2,8,14), `border-right` = "solid 2px")
# include vs RHH info for all pitchers, even those who didn't meet the inning qualification
All_RP_vs_RHH <- read_csv("All RP vs RHH.csv")
cleaned_All_RP_vs_RHH <- All_RP_vs_RHH %>%
select(c(Name,playerId,IP,RHH_OPS,`RHH_HR/9`,`RHH_SO/BB`,RHH_ERA,RHH_WHIP))
# include G, BF info for all pitchers, even those who didn't meet the inning qualification
All_Games_and_Batters_Faced <- read_csv("All Games and Batters Faced.csv",
col_types = cols_only(G = col_guess(), IP = col_guess(),
Name = col_guess(), TBF = col_guess(),
playerid = col_guess()
)
)
cleaned_All_Games_and_Batters_Faced <- All_Games_and_Batters_Faced %>%
mutate(`IP/G` = IP/G) %>%
mutate(`TBF/G` = TBF/G)
# build table
All_Table <- left_join(cleaned_RP_vs_LHH,cleaned_All_RP_vs_RHH,by="playerId")
All_Table <- left_join(All_Table,cleaned_All_Games_and_Batters_Faced,
by=c("playerId" = "playerid")) %>%
select(-c(Name.y,Name,playerId))
# build aesthetics
font.size_small <- "8pt"
sketch4 = htmltools::withTags(table(class = 'display',
thead(tr(th(rowspan = 2, 'Pitcher'),
th(colspan = 6, 'vs LHH'),
th(colspan = 6, 'vs RHH'),
th(colspan = 5, 'Durability')),
tr(lapply(c("IP","OPS","HR/9","SO/BB","ERA","WHIP",
"IP","OPS","HR/9","SO/BB","ERA","WHIP",
"G","IP","TBF","IP/G","TBF/G"),
th)
)
)
)
)
# display table
DT::datatable(All_Table,
container = sketch4, rownames = FALSE,
options=list(autoWidth = TRUE,
columnDefs = list(list(width = '100px', targets = 0),
list(width = '6px', targets = 1:6),
list(width = '6px', targets = 7:13),
list(className = 'dt-right', targets = 9:12)),
scrollX = TRUE,
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '",
font.size_small, "'});"),
"}"))) %>%
formatRound(c("LHH_OPS","LHH_HR/9","LHH_SO/BB","LHH_ERA","LHH_WHIP","RHH_OPS",
"RHH_HR/9","RHH_SO/BB","RHH_ERA","RHH_WHIP"),3) %>%
formatRound(c("TBF/G","IP/G"),1) %>%
formatStyle(c(1,7,13), `border-right` = "solid 2px")
View(RP_vs_LHH)
setwd("~/Desktop/Moneyball")
relative_payroll <- read_csv(file = "data/mlb_relative_payroll")
library(tidyverse)
relative_payroll <- read_csv(file = "data/mlb_relative_payroll")
relative_payroll <- read_csv(file = "data/mlb_relative_payrolls.csv")
View(relative_payroll)
hist(relative_payroll$Winning_Percentage)
ggplot(data = relative_payroll) +
geom_histogram(aes(x = Winning_Percentage, y = ...density...))
ggplot(data = relative_payroll) +
geom_histogram(aes(x = Winning_Percentage, y = ..density..))
ggplot(data = relative_payroll) +
geom_histogram(aes(x = Winning_Percentage, y = ..density..), bins = 50)
ggplot(data = relative_payroll) +
geom_histogram(aes(x = Winning_Percentage, y = ..density..), binwidth = 0.1)
ggplot(data = relative_payroll) +
geom_histogram(aes(x = Winning_Percentage, y = ..density..), binwidth = 0.05)
#3
ggplot(data = relative_payroll) +
geom_histogram(aes(x = Relative_Payroll, y = ..density..), binwidth = 0.05)
#4
ggplot(data = relative_payroll) +
geom_point(aes(x = Relative_Payroll, y = Winning_Percentage))
#5
ggplot(data = relative_payroll) +
geom_point(mapping = aes(x = Year, y = Team_Payroll))
#6
ggplot(data = relative_payroll) +
geom_point(mapping = aes(x = Year, y = Relative_Payroll))
##MLB Batting Statistics
#1
hitting_qualified <- read_csv("data/hitting_qualified.csv")
View(relative_payroll)
View(hitting_qualified)
#2
hitting_qualified %>% arrange(yearID)
hitting_qualified %>% arrange(desc(yearID))
#3
summarise(hitting_qualified, min(yearID), max(yearID))
#4
hitting_qualified <- hitting_qualified %>% mutate(IBB = as.integer(IBB),
HBP = as.integer(HBP),
SH = as.integer(SH),
SF = as.integer(SF),
GIDP = as.integer(GIDP))
hitting_qualified
#4
hitting_qualified
#5
hitting_qualified <- hitting_qualified %>% replace_na(list(IBB = 0,
HBP = 0,
SH = 0,
SF = 0,
GIDP = 0))
#6
hitting_qualified <- hitting_qualified %>% mutate(X1B = H = X2B - X3B - HR)
#6
hitting_qualified <- hitting_qualified %>% mutate(X1B = H - X2B - X3B - HR)
#7
hitting_qualified <- hitting_qualified %>% mutate(uBB = BB - IBB)
#6
ggplot(data = relative_payroll) +
geom_point(mapping = aes(x = Year, y = Relative_Payroll, font = "Calibri"))
#6
ggplot(data = relative_payroll) +
geom_point(mapping = aes(x = Year, y = Relative_Payroll), font = "Calibri")
#6
ggplot(data = relative_payroll) +
geom_point(mapping = aes(x = Year, y = Relative_Payroll)) +
theme(font = "Calibri")
ggplot(data = relative_payroll) +
geom_point(mapping = aes(x = Year, y = Relative_Payroll)) +
theme(text=element_text(size=16,
family="Serif"))
#6
ggplot(data = relative_payroll) +
geom_point(mapping = aes(x = Year, y = Relative_Payroll))
#6
ggplot(data = relative_payroll) +
geom_point(mapping = aes(x = Year, y = Relative_Payroll)) +
theme(text=element_text(size=16, family="Serif"))
hitting_qualified <-
hitting_qualified %>%
mutate(BBP = BB/PA,
KP = SO/PA,
OBP = (H + BB + HBP)/(AB + BB + HBP + SF),
SLG = (X1B + 2*X2B + 3*X3B + 4*HR)/AB,
OPS = OBP + SLG,
wOBA = (0.687 * uBB + 0.718 * HBP + 0.81 * X1B + 1.256 * X2B +
1.594 * X3B+ 2.065 * HR)/(AB + uBB + SF + HBP))
hitting_qualified <-
hitting_qualified %>%
mutate(BBP_rating = case_when(BBP > 0.15 ~ "Excellent",
BBP > 0.125 ~ "Great"))
hitting_qualified <-
hitting_qualified %>%
mutate(BBP_rating = case_when(BBP >= 0.15 ~ "Excellent",
BBP >= 0.125 ~ "Great",
BBP >= 0.1 ~ "Above Average",
BBP >= 0.08 ~ "Average",
BBP >= 0.07 ~ "Below Average",
BBP >= 0.055 ~ "Poor",
BBP >= 0.04 ~ "Awful"))
hitting_qualified <-
hitting_qualified %>%
mutate(BBP_rating = case_when(BBP >= 0.15 ~ "Excellent",
BBP >= 0.125 ~ "Great",
BBP >= 0.1 ~ "Above Average",
BBP >= 0.08 ~ "Average",
BBP >= 0.07 ~ "Below Average",
BBP >= 0.055 ~ "Poor",
BBP >= 0.04 ~ "Awful")) %>%
mutate(KP_rating = case_when(KP <= 0.1 ~ "Excellent",
KP <= 0.125 ~ "Great",
KP <= 0.16 ~ "Above Average",
KP <= 0.2 ~ "Average",
KP <= 0.22 ~ "Below Average",
KP <= 0.25 ~ "Poor",
KP <= 0.275 ~ "Awful")) %>%
mutate(OBP_rating = case_when(OBP >= 0.39 ~ "Excellent",
OBP >= 0.37 ~ "Great",
OBP >= 0.34 ~ "Above Average",
OBP >= 0.32 ~ "Average",
OBP >= 0.31 ~ "Below Average",
OBP >= 0.3 ~ "Poor",
OBP >= 0.29 ~ "Awful")) %>%
mutate(OPS_rating = case_when(OPS >= 1 ~ "Excellent",
OPS >= 0.9 ~ "Great",
OPS >= 0.8 ~ "Above Average",
OPS >= 0.71 ~ "Average",
OPS >= 0.67 ~ "Below Average",
OPS >= 0.6 ~ "Poor",
OPS >= 0.57 ~ "Awful")) %>%
mutate(wOBA_rating = case_when(wOBA >= 0.4 ~ "Excellent",
wOBA >= 0.37 ~ "Great",
wOBA >= 0.34 ~ "Above Average",
wOBA >= 0.32 ~ "Average",
wOBA >= 0.31 ~ "Below Average",
wOBA >= 0.3 ~ "Poor",
wOBA >= 0.29 ~ "Awful"))
tmp_batting <- hitting_qualified %>%
filter(yearID in c(2000,2015))
tmp_batting <- hitting_qualified %>%
filter(yearID > 2000 & yearID < 2015))
#10
tmp_batting <- hitting_qualified %>%
filter(yearID > 2000 & yearID < 2015)
batting_recent <- tmp_batting %>%
select(c(playerID, yearID, teamID, lgID, BBP, KP, OBP, SLG, OPS, wOBA,
BBP_rating, KP_rating, OBP_rating, OPS_rating, wOBA_rating))
View(batting_recent)
setwd("~/Documents/GitHub/Wharton-Moneyball.github.io")
